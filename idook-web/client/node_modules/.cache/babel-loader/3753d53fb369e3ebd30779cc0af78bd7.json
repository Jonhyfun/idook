{"ast":null,"code":"/* eslint-disable no-underscore-dangle */import React from'react';import ReactDOM from'react-dom';import{createStore,applyMiddleware,compose}from'redux';import{Provider}from'react-redux';import thunk from'redux-thunk';import{createFirestoreInstance,reduxFirestore,getFirestore}from'redux-firestore';import{ReactReduxFirebaseProvider,getFirebase}from'react-redux-firebase';import firebase from'./config/fbConfig';import'./index.css';import App from'./App';import*as serviceWorker from'./serviceWorker';import rootReducer from'./store/reducers/rootReducer';// We enhance compose in order to use Redux DevTools extension\n// https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\nvar composeEnhancers=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||compose;// Create config for rrfProps object. We need this to pass it in the ReactReduxFirebaseProvider component\nvar rrfConfig={useFirestoreForProfile:true,// Firestore for Profile instead of Realtime DB\nuserProfile:'users',attachAuthIsReady:true};var store=createStore(rootReducer,composeEnhancers(applyMiddleware(thunk.withExtraArgument({getFirebase:getFirebase,getFirestore:getFirestore})),reduxFirestore(firebase)// still need this line to get access to firestore via getFirestore function (in projectActions, for example)\n));var rrfProps={firebase:firebase,config:rrfConfig,dispatch:store.dispatch,createFirestoreInstance:createFirestoreInstance// Create firestore instead of craete it in fbConfig.js\n};ReactDOM.render(/*#__PURE__*/React.createElement(Provider,{store:store},/*#__PURE__*/React.createElement(ReactReduxFirebaseProvider,rrfProps,/*#__PURE__*/React.createElement(App,null))),document.getElementById('root'));//console.log('store', store);\n//console.log('state', store.getState());\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/thabataganga/Documentos/GITHUB/idook/idook/idook-web/client/src/index.js"],"names":["React","ReactDOM","createStore","applyMiddleware","compose","Provider","thunk","createFirestoreInstance","reduxFirestore","getFirestore","ReactReduxFirebaseProvider","getFirebase","firebase","App","serviceWorker","rootReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","rrfConfig","useFirestoreForProfile","userProfile","attachAuthIsReady","store","withExtraArgument","rrfProps","config","dispatch","render","document","getElementById","unregister"],"mappings":"AACA,yCACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,OAASC,WAAT,CAAsBC,eAAtB,CAAuCC,OAAvC,KAAsD,OAAtD,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,uBAAT,CAAkCC,cAAlC,CAAkDC,YAAlD,KAAsE,iBAAtE,CACA,OAASC,0BAAT,CAAqCC,WAArC,KAAwD,sBAAxD,CACA,MAAOC,CAAAA,QAAP,KAAqB,mBAArB,CAEA,MAAO,aAAP,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,iBAA/B,CAEA,MAAOC,CAAAA,WAAP,KAAwB,8BAAxB,CAEA;AACA;AACA,GAAMC,CAAAA,gBAAgB,CAAGC,MAAM,CAACC,oCAAP,EAA+Cd,OAAxE,CAEA;AACA,GAAMe,CAAAA,SAAS,CAAG,CAChBC,sBAAsB,CAAE,IADR,CACc;AAC9BC,WAAW,CAAE,OAFG,CAGhBC,iBAAiB,CAAE,IAHH,CAAlB,CAMA,GAAMC,CAAAA,KAAK,CAAGrB,WAAW,CAACa,WAAD,CACvBC,gBAAgB,CACdb,eAAe,CAACG,KAAK,CAACkB,iBAAN,CAAwB,CAAEb,WAAW,CAAXA,WAAF,CAAeF,YAAY,CAAZA,YAAf,CAAxB,CAAD,CADD,CAEdD,cAAc,CAACI,QAAD,CAAY;AAFZ,CADO,CAAzB,CAMA,GAAMa,CAAAA,QAAQ,CAAG,CACfb,QAAQ,CAARA,QADe,CAEfc,MAAM,CAAEP,SAFO,CAGfQ,QAAQ,CAAEJ,KAAK,CAACI,QAHD,CAIfpB,uBAAuB,CAAvBA,uBAAyB;AAJV,CAAjB,CAOAN,QAAQ,CAAC2B,MAAT,cACE,oBAAC,QAAD,EAAU,KAAK,CAAEL,KAAjB,eACE,oBAAC,0BAAD,CAAgCE,QAAhC,cACE,oBAAC,GAAD,MADF,CADF,CADF,CAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,EASA;AACA;AACA;AACA;AACA;AACAhB,aAAa,CAACiB,UAAd","sourcesContent":["\n/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createFirestoreInstance, reduxFirestore, getFirestore } from 'redux-firestore';\nimport { ReactReduxFirebaseProvider, getFirebase } from 'react-redux-firebase';\nimport firebase from './config/fbConfig';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport rootReducer from './store/reducers/rootReducer';\n\n// We enhance compose in order to use Redux DevTools extension\n// https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// Create config for rrfProps object. We need this to pass it in the ReactReduxFirebaseProvider component\nconst rrfConfig = {\n  useFirestoreForProfile: true, // Firestore for Profile instead of Realtime DB\n  userProfile: 'users',\n  attachAuthIsReady: true,\n};\n\nconst store = createStore(rootReducer,\n  composeEnhancers(\n    applyMiddleware(thunk.withExtraArgument({ getFirebase, getFirestore })),\n    reduxFirestore(firebase), // still need this line to get access to firestore via getFirestore function (in projectActions, for example)\n  ));\n\nconst rrfProps = {\n  firebase,\n  config: rrfConfig,\n  dispatch: store.dispatch,\n  createFirestoreInstance, // Create firestore instead of craete it in fbConfig.js\n};\n\nReactDOM.render(\n  <Provider store={store}>\n    <ReactReduxFirebaseProvider {...rrfProps}>\n      <App />\n    </ReactReduxFirebaseProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n//console.log('store', store);\n//console.log('state', store.getState());\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"]},"metadata":{},"sourceType":"module"}