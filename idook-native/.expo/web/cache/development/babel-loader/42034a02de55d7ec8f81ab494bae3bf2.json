{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/thabataganga/Documentos/idook/idook-native/src/screens/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport styles from \"./styles\";\nimport * as firebase from 'firebase';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\n\nvar LoadingScreen = function (_Component) {\n  _inherits(LoadingScreen, _Component);\n\n  var _super = _createSuper(LoadingScreen);\n\n  function LoadingScreen() {\n    _classCallCheck(this, LoadingScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoadingScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          auth = _this$props.auth,\n          profile = _this$props.profile,\n          ids = _this$props.ids;\n      var confirm = '';\n\n      if (ids && profile) {\n        var token = profile.token;\n        var filterToken = ids.filter(function (id) {\n          return id.id === token;\n        });\n\n        if (filterToken.length != 0) {\n          console.log(filterToken[0]);\n\n          if (filterToken[0].empresa != \"Não configurado\") {\n            console.log(filterToken[0].empresa);\n            confirm = 1;\n          }\n        }\n      }\n\n      if (!auth.isLoaded) {\n        this.props.navigation.navigate(\"Login\");\n      } else {\n        if (!profile.token) {\n          this.props.navigation.navigate(\"Token\");\n        } else {\n          if (!confirm) {\n            this.props.navigation.navigate(\"NewID\");\n          } else {\n            this.props.navigation.navigate(\"Inicial\");\n          }\n        }\n      }\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }\n      }, \"Carregando...\"), React.createElement(ActivityIndicator, {\n        size: \"large\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return LoadingScreen;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(state);\n  return {\n    auth: state.firebase.auth,\n    profile: state.firebase.profile,\n    ids: state.firestore.ordered.ids\n  };\n};\n\nexport default compose(connect(mapStateToProps, null), firestoreConnect([{\n  collection: 'ids'\n}]))(LoadingScreen);","map":{"version":3,"sources":["/home/thabataganga/Documentos/idook/idook-native/src/screens/index.js"],"names":["React","Component","styles","firebase","connect","compose","firestoreConnect","LoadingScreen","props","auth","profile","ids","confirm","token","filterToken","filter","id","length","console","log","empresa","isLoaded","navigation","navigate","container","mapStateToProps","state","firestore","ordered","collection"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;;AAEA,OAAOC,MAAP;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AAGA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;;IAEMC,a;;;;;;;;;;;;;6BAGK;AAAA,wBAEsB,KAAKC,KAF3B;AAAA,UAEAC,IAFA,eAEAA,IAFA;AAAA,UAEMC,OAFN,eAEMA,OAFN;AAAA,UAEeC,GAFf,eAEeA,GAFf;AAIP,UAAIC,OAAO,GAAG,EAAd;;AAEA,UAAGD,GAAG,IAAKD,OAAX,EAAmB;AACf,YAAMG,KAAK,GAAGH,OAAO,CAACG,KAAtB;AAEA,YAAMC,WAAW,GAAGH,GAAG,CAACI,MAAJ,CAAW,UAAAC,EAAE;AAAA,iBAAIA,EAAE,CAACA,EAAH,KAAUH,KAAd;AAAA,SAAb,CAApB;;AAEA,YAAGC,WAAW,CAACG,MAAZ,IAAsB,CAAzB,EAA2B;AACvBC,UAAAA,OAAO,CAACC,GAAR,CAAYL,WAAW,CAAC,CAAD,CAAvB;;AACA,cAAGA,WAAW,CAAC,CAAD,CAAX,CAAeM,OAAf,IAA0B,iBAA7B,EAA+C;AAC3CF,YAAAA,OAAO,CAACC,GAAR,CAAYL,WAAW,CAAC,CAAD,CAAX,CAAeM,OAA3B;AACAR,YAAAA,OAAO,GAAG,CAAV;AACH;AAEJ;AAKJ;;AAOD,UAAG,CAACH,IAAI,CAACY,QAAT,EAAkB;AACd,aAAKb,KAAL,CAAWc,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B;AACH,OAFD,MAEO;AACH,YAAG,CAACb,OAAO,CAACG,KAAZ,EAAkB;AACd,eAAKL,KAAL,CAAWc,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B;AACH,SAFD,MAEM;AACF,cAAG,CAACX,OAAJ,EAAY;AACR,iBAAKJ,KAAL,CAAWc,UAAX,CAAsBC,QAAtB,CAA+B,OAA/B;AACH,WAFD,MAEO;AACH,iBAAKf,KAAL,CAAWc,UAAX,CAAsBC,QAAtB,CAA+B,SAA/B;AACH;AACJ;AAEJ;;AAED,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAErB,MAAM,CAACsB,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,EAEI,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ;AAOA;;;;EAvDwBvB,S;;AA6D5B,IAAMwB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAE/BR,EAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,SAAM;AACFjB,IAAAA,IAAI,EAAEiB,KAAK,CAACvB,QAAN,CAAeM,IADnB;AAEFC,IAAAA,OAAO,EAAEgB,KAAK,CAACvB,QAAN,CAAeO,OAFtB;AAGFC,IAAAA,GAAG,EAAEe,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBjB;AAH3B,GAAN;AAKD,CARH;;AAWE,eAAeN,OAAO,CACpBD,OAAO,CAACqB,eAAD,EAAkB,IAAlB,CADa,EAEpBnB,gBAAgB,CAAC,CACb;AAAEuB,EAAAA,UAAU,EAAE;AAAd,CADa,CAAD,CAFI,CAAP,CAKdtB,aALc,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport { View, Text, ActivityIndicator } from \"react-native\"\nimport styles from './styles';\nimport * as firebase from 'firebase'\n\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { firestoreConnect } from 'react-redux-firebase';\n\nclass LoadingScreen extends Component{\n\n   \n   render(){\n\n    const {auth, profile, ids} = this.props;\n\n    var confirm = '';\n\n    if(ids  && profile){\n        const token = profile.token\n\n        const filterToken = ids.filter(id => id.id === token);\n\n        if(filterToken.length != 0){\n            console.log(filterToken[0])\n            if(filterToken[0].empresa != \"Não configurado\"){\n                console.log(filterToken[0].empresa)\n                confirm = 1;\n            }\n    \n        }\n        \n        \n\n        \n    }\n    \n\n    \n\n\n\n    if(!auth.isLoaded){\n        this.props.navigation.navigate(\"Login\");\n    } else {\n        if(!profile.token){\n            this.props.navigation.navigate(\"Token\");\n        } else{\n            if(!confirm){\n                this.props.navigation.navigate(\"NewID\");\n            } else {\n                this.props.navigation.navigate(\"Inicial\");\n            }\n        }\n\n    }\n\n    return (\n        <View style={styles.container}>\n            <Text>Carregando...</Text>\n            <ActivityIndicator size='large'></ActivityIndicator>\n        </View>\n\n    )\n   }\n        \n\n    \n}\n\nconst mapStateToProps = (state) => {\n\n    console.log(state)\n    return{\n        auth: state.firebase.auth,\n        profile: state.firebase.profile,\n        ids: state.firestore.ordered.ids,\n    }\n  }\n  \n\n  export default compose(\n    connect(mapStateToProps, null),\n    firestoreConnect([\n        { collection: 'ids' }\n    ])\n) (LoadingScreen)\n\n"]},"metadata":{},"sourceType":"module"}