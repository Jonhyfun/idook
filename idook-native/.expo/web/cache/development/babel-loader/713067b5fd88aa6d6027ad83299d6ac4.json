{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nvar _setTimeout = global.setTimeout;\nvar _clearTimeout = global.clearTimeout;\nvar MAX_TIMER_DURATION_MS = 60 * 1000;\n\nif (Platform.OS === 'android') {\n  var timerFix = {};\n\n  var runTask = function runTask(id, fn, ttl, args) {\n    var waitingTime = ttl - Date.now();\n\n    if (waitingTime <= 1) {\n      InteractionManager.runAfterInteractions(function () {\n        if (!timerFix[id]) {\n          return;\n        }\n\n        delete timerFix[id];\n        fn.apply(void 0, _toConsumableArray(args));\n      });\n      return;\n    }\n\n    var afterTime = Math.min(waitingTime, MAX_TIMER_DURATION_MS);\n    timerFix[id] = _setTimeout(function () {\n      return runTask(id, fn, ttl, args);\n    }, afterTime);\n  };\n\n  global.setTimeout = function (fn, time) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (MAX_TIMER_DURATION_MS < time) {\n      var ttl = Date.now() + time;\n      var id = '_lt_' + Object.keys(timerFix).length;\n      runTask(id, fn, ttl, args);\n      return id;\n    }\n\n    return _setTimeout.apply(void 0, [fn, time].concat(args));\n  };\n\n  global.clearTimeout = function (id) {\n    if (typeof id === 'string' && id.startsWith('_lt_')) {\n      _clearTimeout(timerFix[id]);\n\n      delete timerFix[id];\n      return;\n    }\n\n    _clearTimeout(id);\n  };\n}","map":{"version":3,"sources":["/home/thabataganga/Documentos/GITHUB/idook/idook/idook-native/yellowtime.js"],"names":["_setTimeout","global","setTimeout","_clearTimeout","clearTimeout","MAX_TIMER_DURATION_MS","Platform","OS","timerFix","runTask","id","fn","ttl","args","waitingTime","Date","now","InteractionManager","runAfterInteractions","afterTime","Math","min","time","Object","keys","length","startsWith"],"mappings":";;;AAEA,IAAMA,WAAW,GAAGC,MAAM,CAACC,UAA3B;AACA,IAAMC,aAAa,GAAGF,MAAM,CAACG,YAA7B;AACA,IAAMC,qBAAqB,GAAG,KAAK,IAAnC;;AACA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAG3B,MAAMC,QAAQ,GAAG,EAAjB;;AACA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,EAAD,EAAKC,EAAL,EAASC,GAAT,EAAcC,IAAd,EAAuB;AACnC,QAAMC,WAAW,GAAGF,GAAG,GAAGG,IAAI,CAACC,GAAL,EAA1B;;AACA,QAAIF,WAAW,IAAI,CAAnB,EAAsB;AAClBG,MAAAA,kBAAkB,CAACC,oBAAnB,CAAwC,YAAM;AAC1C,YAAI,CAACV,QAAQ,CAACE,EAAD,CAAb,EAAmB;AACf;AACH;;AACD,eAAOF,QAAQ,CAACE,EAAD,CAAf;AACAC,QAAAA,EAAE,MAAF,4BAAME,IAAN;AACH,OAND;AAOA;AACH;;AAED,QAAMM,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASP,WAAT,EAAsBT,qBAAtB,CAAlB;AACAG,IAAAA,QAAQ,CAACE,EAAD,CAAR,GAAeV,WAAW,CAAC;AAAA,aAAMS,OAAO,CAACC,EAAD,EAAKC,EAAL,EAASC,GAAT,EAAcC,IAAd,CAAb;AAAA,KAAD,EAAmCM,SAAnC,CAA1B;AACH,GAfD;;AAiBAlB,EAAAA,MAAM,CAACC,UAAP,GAAoB,UAACS,EAAD,EAAKW,IAAL,EAAuB;AAAA,sCAATT,IAAS;AAATA,MAAAA,IAAS;AAAA;;AACvC,QAAIR,qBAAqB,GAAGiB,IAA5B,EAAkC;AAC9B,UAAMV,GAAG,GAAGG,IAAI,CAACC,GAAL,KAAaM,IAAzB;AACA,UAAMZ,EAAE,GAAG,SAASa,MAAM,CAACC,IAAP,CAAYhB,QAAZ,EAAsBiB,MAA1C;AACAhB,MAAAA,OAAO,CAACC,EAAD,EAAKC,EAAL,EAASC,GAAT,EAAcC,IAAd,CAAP;AACA,aAAOH,EAAP;AACH;;AACD,WAAOV,WAAW,MAAX,UAAYW,EAAZ,EAAgBW,IAAhB,SAAyBT,IAAzB,EAAP;AACH,GARD;;AAUAZ,EAAAA,MAAM,CAACG,YAAP,GAAsB,UAAAM,EAAE,EAAI;AACxB,QAAI,OAAOA,EAAP,KAAc,QAAd,IAA0BA,EAAE,CAACgB,UAAH,CAAc,MAAd,CAA9B,EAAqD;AACjDvB,MAAAA,aAAa,CAACK,QAAQ,CAACE,EAAD,CAAT,CAAb;;AACA,aAAOF,QAAQ,CAACE,EAAD,CAAf;AACA;AACH;;AACDP,IAAAA,aAAa,CAACO,EAAD,CAAb;AACH,GAPD;AAQH","sourcesContent":["import {Platform, InteractionManager} from 'react-native';\n\nconst _setTimeout = global.setTimeout;\nconst _clearTimeout = global.clearTimeout;\nconst MAX_TIMER_DURATION_MS = 60 * 1000;\nif (Platform.OS === 'android') {\n// Work around issue `Setting a timer for long time`\n// see: https://github.com/firebase/firebase-js-sdk/issues/97\n    const timerFix = {};\n    const runTask = (id, fn, ttl, args) => {\n        const waitingTime = ttl - Date.now();\n        if (waitingTime <= 1) {\n            InteractionManager.runAfterInteractions(() => {\n                if (!timerFix[id]) {\n                    return;\n                }\n                delete timerFix[id];\n                fn(...args);\n            });\n            return;\n        }\n\n        const afterTime = Math.min(waitingTime, MAX_TIMER_DURATION_MS);\n        timerFix[id] = _setTimeout(() => runTask(id, fn, ttl, args), afterTime);\n    };\n\n    global.setTimeout = (fn, time, ...args) => {\n        if (MAX_TIMER_DURATION_MS < time) {\n            const ttl = Date.now() + time;\n            const id = '_lt_' + Object.keys(timerFix).length;\n            runTask(id, fn, ttl, args);\n            return id;\n        }\n        return _setTimeout(fn, time, ...args);\n    };\n\n    global.clearTimeout = id => {\n        if (typeof id === 'string' && id.startsWith('_lt_')) {\n            _clearTimeout(timerFix[id]);\n            delete timerFix[id];\n            return;\n        }\n        _clearTimeout(id);\n    };\n}"]},"metadata":{},"sourceType":"module"}