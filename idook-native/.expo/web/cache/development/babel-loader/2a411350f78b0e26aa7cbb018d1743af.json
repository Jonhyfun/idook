{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/thabataganga/Documentos/idook/idook-native/src/pages/id/uploadphoto/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { ImagePicker } from 'expo';\nimport * as firebase from 'firebase';\n\nvar HomeScreen = function (_React$Component) {\n  _inherits(HomeScreen, _React$Component);\n\n  var _super = _createSuper(HomeScreen);\n\n  function HomeScreen() {\n    var _this;\n\n    _classCallCheck(this, HomeScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onChooseImagePress = function _callee() {\n      var result;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync());\n\n            case 2:\n              result = _context.sent;\n\n              if (!result.cancelled) {\n                _this.uploadImage(result.uri, \"test-image\").then(function () {\n                  Alert.alert(\"Success\");\n                }).catch(function (error) {\n                  Alert.alert(error);\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.uploadImage = function _callee2(uri, imageName) {\n      var response, blob, ref;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetch(uri));\n\n            case 2:\n              response = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(response.blob());\n\n            case 5:\n              blob = _context2.sent;\n              ref = firebase.storage().ref().child(\"images/\" + imageName);\n              return _context2.abrupt(\"return\", ref.put(blob));\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(HomeScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, React.createElement(Button, {\n        title: \"Choose image...\",\n        onPress: this.onChooseImagePress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return HomeScreen;\n}(React.Component);\n\nHomeScreen.navigationOptions = {\n  header: null\n};\nexport { HomeScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 50,\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["/home/thabataganga/Documentos/idook/idook-native/src/pages/id/uploadphoto/index.js"],"names":["React","ImagePicker","firebase","HomeScreen","onChooseImagePress","launchCameraAsync","result","cancelled","uploadImage","uri","then","Alert","alert","catch","error","imageName","fetch","response","blob","ref","storage","child","put","styles","container","Component","navigationOptions","header","StyleSheet","create","flex","paddingTop","alignItems"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;AAEA,SAASC,WAAT,QAA4B,MAA5B;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;;IAEqBC,U;;;;;;;;;;;;;;;;UAKnBC,kB,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACAH,WAAW,CAACI,iBAAZ,EADA;;AAAA;AACfC,cAAAA,MADe;;AAInB,kBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACrB,sBAAKC,WAAL,CAAiBF,MAAM,CAACG,GAAxB,EAA6B,YAA7B,EACGC,IADH,CACQ,YAAM;AACVC,kBAAAA,KAAK,CAACC,KAAN,CAAY,SAAZ;AACD,iBAHH,EAIGC,KAJH,CAIS,UAACC,KAAD,EAAW;AAChBH,kBAAAA,KAAK,CAACC,KAAN,CAAYE,KAAZ;AACD,iBANH;AAOD;;AAZkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAerBN,W,GAAc,kBAAOC,GAAP,EAAYM,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACWC,KAAK,CAACP,GAAD,CADhB;;AAAA;AACNQ,cAAAA,QADM;AAAA;AAAA,+CAEOA,QAAQ,CAACC,IAAT,EAFP;;AAAA;AAENA,cAAAA,IAFM;AAIRC,cAAAA,GAJQ,GAIFjB,QAAQ,CAACkB,OAAT,GAAmBD,GAAnB,GAAyBE,KAAzB,CAA+B,YAAYN,SAA3C,CAJE;AAAA,gDAKLI,GAAG,CAACG,GAAJ,CAAQJ,IAAR,CALK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;6BAQL;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEK,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,iBAAd;AAAgC,QAAA,OAAO,EAAE,KAAKpB,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD;;;;EAlCqCJ,KAAK,CAACyB,S;;AAAzBtB,U,CACZuB,iB,GAAoB;AACzBC,EAAAA,MAAM,EAAE;AADiB,C;SADRxB,U;AAqCrB,IAAMoB,MAAM,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,SAAS,EAAE;AAAEM,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,UAAU,EAAE,EAAvB;AAA2BC,IAAAA,UAAU,EAAE;AAAvC;AADoB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { Image, StyleSheet, Button, Text, View, Alert, } from 'react-native';\nimport { ImagePicker } from 'expo';\nimport * as firebase from 'firebase';\n\nexport default class HomeScreen extends React.Component {\n  static navigationOptions = {\n    header: null,\n  };\n\n  onChooseImagePress = async () => {\n    let result = await ImagePicker.launchCameraAsync();\n    //let result = await ImagePicker.launchImageLibraryAsync();\n\n    if (!result.cancelled) {\n      this.uploadImage(result.uri, \"test-image\")\n        .then(() => {\n          Alert.alert(\"Success\");\n        })\n        .catch((error) => {\n          Alert.alert(error);\n        });\n    }\n  }\n\n  uploadImage = async (uri, imageName) => {\n    const response = await fetch(uri);\n    const blob = await response.blob();\n\n    var ref = firebase.storage().ref().child(\"images/\" + imageName);\n    return ref.put(blob);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Button title=\"Choose image...\" onPress={this.onChooseImagePress} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, paddingTop: 50, alignItems: \"center\", },\n});"]},"metadata":{},"sourceType":"module"}