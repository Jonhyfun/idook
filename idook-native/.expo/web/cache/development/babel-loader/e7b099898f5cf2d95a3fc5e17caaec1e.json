{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/thabataganga/Documentos/idook/idook-native/src/pages/id/uploadphoto/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport styles from \"./styles\";\nexport default function ImagePickerExample() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!Constants.platform.ios) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, image && React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }), React.createElement(Button, {\n    title: \"Pick an image from camera roll\",\n    style: {\n      marginVertical: 10\n    },\n    onPress: pickImage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: pickImage,\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"#FFF\",\n      fontWeight: \"500\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, \"Salvar\")));\n}","map":{"version":3,"sources":["/home/thabataganga/Documentos/idook/idook-native/src/pages/id/uploadphoto/index.js"],"names":["React","useState","useEffect","ImagePicker","Constants","styles","ImagePickerExample","image","setImage","platform","ios","requestCameraRollPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","flex","alignItems","justifyContent","width","height","marginVertical","button","color","fontWeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,MAAP;AAGA,eAAe,SAASC,kBAAT,GAA8B;AAAA,kBACjBL,QAAQ,CAAC,IAAD,CADS;AAAA;AAAA,MACpCM,KADoC;AAAA,MAC7BC,QAD6B;;AAG3CN,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKE,SAAS,CAACK,QAAV,CAAmBC,GADxB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAE4BP,WAAW,CAACQ,iCAAZ,EAF5B;;AAAA;AAAA;AAEWC,cAAAA,MAFX,yBAEWA,MAFX;;AAGG,kBAAIA,MAAM,KAAK,SAAf,EAA0B;AACxBC,gBAAAA,KAAK,CAAC,2DAAD,CAAL;AACD;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAQD,GATQ,EASN,EATM,CAAT;;AAWA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGX,WAAW,CAACY,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEb,WAAW,CAACc,gBAAZ,CAA6BC,GADY;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH6C;AAIrDC,cAAAA,OAAO,EAAE;AAJ4C,aAApC,CADH;;AAAA;AACZC,YAAAA,MADY;AAQhBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAEA,gBAAI,CAACA,MAAM,CAACG,SAAZ,EAAuB;AACrBjB,cAAAA,QAAQ,CAACc,MAAM,CAACI,GAAR,CAAR;AACD;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAeA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGtB,KAAK,IAAI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEmB,MAAAA,GAAG,EAAEnB;AAAP,KAAf;AAA+B,IAAA,KAAK,EAAE;AAAEuB,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFZ,EAGE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gCAAd;AAA+C,IAAA,KAAK,EAAE;AAAEC,MAAAA,cAAc,EAAE;AAAlB,KAAtD;AAA8E,IAAA,OAAO,EAAElB,SAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEA,SAA3B;AAAsC,IAAA,KAAK,EAAET,MAAM,CAAC4B,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACc,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,UAAU,EAAE;AAA7B,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADd,CAJF,CADF;AAUD","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Image, View } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport Constants from 'expo-constants';\nimport styles from './styles';\n\n\nexport default function ImagePickerExample() {\n  const [image, setImage] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      if (Constants.platform.ios) {\n        const { status } = await ImagePicker.requestCameraRollPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    console.log(result);\n\n    if (!result.cancelled) {\n      setImage(result.uri);\n    }\n  };\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      \n      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n      <Button title=\"Pick an image from camera roll\" style={{ marginVertical: 10 }} onPress={pickImage} />\n      <TouchableOpacity onPress={pickImage} style={styles.button}>\n                    <Text style={{ color: \"#FFF\", fontWeight: \"500\" }}>Salvar</Text>\n        </TouchableOpacity>\n    </View>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}