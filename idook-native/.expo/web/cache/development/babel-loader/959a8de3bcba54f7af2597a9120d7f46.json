{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/thabataganga/Documentos/idook/idook-native/src/auth/login/index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { connect } from 'react-redux';\nimport { Button, Input, Spinner } from \"./common\";\nimport { changeLoginEmail, changeLoginPassword, loginUser, registerUser } from \"../actions\";\n\nvar LoginForm = function (_Component) {\n  _inherits(LoginForm, _Component);\n\n  var _super = _createSuper(LoginForm);\n\n  function LoginForm() {\n    _classCallCheck(this, LoginForm);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LoginForm, [{\n    key: \"onLoginPress\",\n    value: function onLoginPress() {\n      var _this$props = this.props,\n          email = _this$props.email,\n          password = _this$props.password;\n      this.props.loginUser({\n        email: email,\n        password: password\n      });\n    }\n  }, {\n    key: \"onRegisterPress\",\n    value: function onRegisterPress() {\n      var _this$props2 = this.props,\n          email = _this$props2.email,\n          password = _this$props2.password;\n      this.props.registerUser({\n        email: email,\n        password: password\n      });\n    }\n  }, {\n    key: \"renderMessage\",\n    value: function renderMessage() {\n      if (this.props.error) {\n        return React.createElement(Text, {\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 9\n          }\n        }, this.props.error);\n      } else if (this.props.success) {\n        return React.createElement(Text, {\n          style: {\n            color: 'green'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 9\n          }\n        }, this.props.success);\n      }\n    }\n  }, {\n    key: \"renderButtons\",\n    value: function renderButtons() {\n      if (this.props.loading) {\n        return React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 14\n          }\n        });\n      } else {\n        return React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 9\n          }\n        }, React.createElement(Button, {\n          onPress: this.onLoginPress.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }\n        }, \"Entrar\"), React.createElement(Button, {\n          onPress: this.onRegisterPress.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }\n        }, \"Cadastrar\"));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, React.createElement(Input, {\n        label: \"Email\",\n        value: this.props.email,\n        onChangeText: function onChangeText(text) {\n          return _this.props.changeLoginEmail(text);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }), React.createElement(Input, {\n        label: \"Password\",\n        value: this.props.password,\n        onChangeText: function onChangeText(text) {\n          return _this.props.changeLoginPassword(text);\n        },\n        secureTextEntry: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }), this.renderMessage(), this.renderButtons());\n    }\n  }]);\n\n  return LoginForm;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var auth = _ref.auth;\n  var email = auth.email,\n      password = auth.password,\n      error = auth.error,\n      success = auth.success,\n      loading = auth.loading;\n  return {\n    email: email,\n    password: password,\n    error: error,\n    success: success,\n    loading: loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  changeLoginEmail: changeLoginEmail,\n  changeLoginPassword: changeLoginPassword,\n  loginUser: loginUser,\n  registerUser: registerUser\n})(LoginForm);","map":{"version":3,"sources":["/home/thabataganga/Documentos/idook/idook-native/src/auth/login/index.js"],"names":["React","Component","connect","Button","Input","Spinner","changeLoginEmail","changeLoginPassword","loginUser","registerUser","LoginForm","props","email","password","error","color","success","loading","onLoginPress","bind","onRegisterPress","text","renderMessage","renderButtons","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View, Text } from 'react-native';\nimport { connect } from 'react-redux';\n\nimport { Button, Input, Spinner } from './common';\n\nimport {\n  changeLoginEmail,\n  changeLoginPassword,\n  loginUser,\n  registerUser\n} from '../actions';\n\nclass LoginForm extends Component {\n  onLoginPress() {\n    const { email, password } = this.props;\n    this.props.loginUser({ email, password });\n  }\n\n  onRegisterPress() {\n    const { email, password } = this.props;\n    this.props.registerUser({ email, password });\n  }\n\n  renderMessage() {\n    if (this.props.error) {\n      return (\n        <Text style={{ color: 'red' }}>\n          {this.props.error}\n        </Text>\n      );\n    }\n    else if (this.props.success) {\n      return (\n        <Text style={{ color: 'green' }}>\n          {this.props.success}\n        </Text>\n      );\n    }\n  }\n\n  renderButtons() {\n    if (this.props.loading) {\n      return <Spinner />;\n    }\n    else {\n      return (\n        <View>\n          <Button onPress={this.onLoginPress.bind(this)}>\n            Entrar\n          </Button>\n\n          <Button onPress={this.onRegisterPress.bind(this)}>\n            Cadastrar\n          </Button>\n        </View>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <View>\n        <Input\n          label='Email'\n          value={this.props.email}\n          onChangeText={(text) => this.props.changeLoginEmail(text)}\n        />\n\n        <Input\n          label='Password'\n          value={this.props.password}\n          onChangeText={(text) => this.props.changeLoginPassword(text)}\n          secureTextEntry\n        />\n\n        {this.renderMessage()}\n\n        {this.renderButtons()}\n      </View>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }) => {\n  const { email, password, error, success, loading } = auth;\n\n  return {\n    email,\n    password,\n    error,\n    success,\n    loading\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  {\n    changeLoginEmail,\n    changeLoginPassword,\n    loginUser,\n    registerUser\n  }\n)(LoginForm);\n"]},"metadata":{},"sourceType":"module"}